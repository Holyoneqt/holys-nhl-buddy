/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/build/controllers/game.controller.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/build/controllers/game.controller.js":
/*!***************************************************!*\
  !*** ./dist/build/controllers/game.controller.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst nhl_api_1 = __webpack_require__(/*! ../nhl.api */ \"./dist/build/nhl.api.js\");\r\nlet gameData;\r\nlet awayTeam;\r\nlet homeTeam;\r\nlet allAwayGames;\r\nlet allHomeGames;\r\nwindow.onload = () => {\r\n    const parameter = window.location.href.split('?')[1];\r\n    if (parameter) {\r\n        if (parameter.startsWith('id')) {\r\n            fetchData(parameter.substring(3))\r\n                .then(() => {\r\n                console.log(gameData);\r\n                console.log(awayTeam);\r\n                console.log(homeTeam);\r\n            })\r\n                .then(() => displayMetaData());\r\n        }\r\n    }\r\n};\r\nfunction fetchData(gameId) {\r\n    return nhl_api_1.getGame(gameId)\r\n        .then(response => gameData = response.gameData)\r\n        .then(() => nhl_api_1.getTeam(gameData.teams.away.id))\r\n        .then(response => awayTeam = response.teams[0])\r\n        .then(() => nhl_api_1.getTeam(gameData.teams.home.id))\r\n        .then(response => homeTeam = response.teams[0])\r\n        .then(() => nhl_api_1.getSchedule(gameData.teams.away.id, nhl_api_1.SEASON_START, nhl_api_1.SEASON_END))\r\n        .then(response => allAwayGames = response.dates)\r\n        .then(() => nhl_api_1.getSchedule(gameData.teams.home.id, nhl_api_1.SEASON_START, nhl_api_1.SEASON_END))\r\n        .then(response => allHomeGames = response.dates);\r\n}\r\nfunction displayMetaData() {\r\n    document.getElementById('details').style.display = 'block';\r\n    document.getElementById('away-logo').src = `./images/${awayTeam.id}.gif`;\r\n    document.getElementById('home-logo').src = `./images/${homeTeam.id}.gif`;\r\n    displayStats();\r\n}\r\nfunction displayStats() {\r\n    const detailsTable = document.getElementById('details-table');\r\n    document.getElementById('loading').style.display = 'none';\r\n    const awayTeamStats = awayTeam.teamStats[0].splits[0].stat, homeTeamStats = homeTeam.teamStats[0].splits[0].stat;\r\n    detailsTable.innerHTML = '';\r\n    detailsTable.appendChild(createTr([awayTeam.abbreviation, '@', homeTeam.abbreviation], false, 3, 'th'));\r\n    detailsTable.appendChild(createTr(['Regular Season'], false, 1, 'th', 3));\r\n    detailsTable.appendChild(createTr([awayTeamStats.gamesPlayed, 'Games Played', homeTeamStats.gamesPlayed], false));\r\n    detailsTable.appendChild(createTr([awayTeamStats.wins, 'Wins', homeTeamStats.wins]));\r\n    detailsTable.appendChild(createTr([awayTeamStats.losses, 'Losses', homeTeamStats.losses]));\r\n    detailsTable.appendChild(createTr([awayTeamStats.ot, 'OT', homeTeamStats.ot]));\r\n    detailsTable.appendChild(createTr([awayTeamStats.ptPctg, 'Point %', homeTeamStats.ptPctg]));\r\n    detailsTable.appendChild(createTr([' ', ' ', ' '], false));\r\n    detailsTable.appendChild(createTr([awayTeamStats.goalsPerGame, 'Goals per Game', homeTeamStats.goalsPerGame]));\r\n    detailsTable.appendChild(createTr([awayTeamStats.powerPlayPercentage, 'PP%', homeTeamStats.powerPlayPercentage]));\r\n    detailsTable.appendChild(createTr([awayTeamStats.penaltyKillPercentage, 'PK%', homeTeamStats.penaltyKillPercentage]));\r\n    detailsTable.appendChild(createTr([' ', ' ', ' '], false));\r\n    detailsTable.appendChild(createTr([Math.round(awayTeamStats.shotsPerGame), 'Shots per Game', Math.round(homeTeamStats.shotsPerGame)]));\r\n    detailsTable.appendChild(createTr([awayTeamStats.shootingPctg, 'Shooting %', homeTeamStats.shootingPctg]));\r\n    detailsTable.appendChild(createTr([Math.round(awayTeamStats.shotsAllowed), 'Shots Against', Math.round(homeTeamStats.shotsAllowed)]));\r\n    detailsTable.appendChild(createTr([awayTeamStats.savePctg, 'Save %', homeTeamStats.savePctg]));\r\n    detailsTable.appendChild(createTr([' ', ' ', ' '], false));\r\n}\r\nfunction displayLastTen() {\r\n    const detailsTable = document.getElementById('details-table');\r\n    document.getElementById('loading').style.display = 'none';\r\n    const twoWeeksAgo = new Date(new Date().setTime(new Date().getTime() - (1000 * 60 * 60 * 24 * 14)));\r\n    const oneWeekAgo = new Date(new Date().setTime(new Date().getTime() - (1000 * 60 * 60 * 24 * 7)));\r\n    console.log(twoWeeksAgo);\r\n    const lastTwoWeeksAway = allAwayGames.filter(date => date.games[0].status.detailedState === 'Final').map(date => date.games[0]).filter(game => new Date(game.gameDate).getTime() > twoWeeksAgo.getTime());\r\n    const lastTwoWeeksHome = allHomeGames.filter(g => g.games[0].status.detailedState === 'Final').map(date => date.games[0]).filter(game => new Date(game.gameDate).getTime() > twoWeeksAgo.getTime());\r\n    const lastFiveAway = [...lastTwoWeeksAway].splice(-5);\r\n    const lastFiveHome = [...lastTwoWeeksHome].splice(-5);\r\n    detailsTable.innerHTML = '';\r\n    detailsTable.appendChild(createTr([awayTeam.abbreviation, '@', homeTeam.abbreviation], false, 3, 'th'));\r\n    detailsTable.appendChild(createTr(['Past 2 Weeks'], false, 1, 'th', 3));\r\n    detailsTable.appendChild(createTr([getRecord(lastTwoWeeksAway, awayTeam.id), 'Record', getRecord(lastTwoWeeksHome, homeTeam.id)], false));\r\n    const lastFiveTr = createTr(['', 'Last 5 Record', ''], false);\r\n    lastFiveTr.classList.add('last-five');\r\n    lastFiveTr.children[0].appendChild(getLastFiveGamesStreak(lastFiveAway, awayTeam.id));\r\n    lastFiveTr.children[2].appendChild(getLastFiveGamesStreak(lastFiveHome, homeTeam.id));\r\n    detailsTable.appendChild(lastFiveTr);\r\n    // detailsTable.appendChild(createPointsCanvasTr(lastTenDaysAway, lastTenDaysHome));\r\n    detailsTable.appendChild(createGoalsScoredCanvasTr(lastTwoWeeksAway.filter(g => new Date(g.gameDate).getTime() > oneWeekAgo.getTime()), lastTwoWeeksHome.filter(g => new Date(g.gameDate).getTime() > oneWeekAgo.getTime())));\r\n}\r\nfunction createTr(dataArray, highlight = true, numData = 3, type = 'td', colspan) {\r\n    const tr = document.createElement('tr');\r\n    for (let i = 0; i < numData; i++) {\r\n        const td = document.createElement(type);\r\n        if (colspan) {\r\n            td.colSpan = colspan;\r\n        }\r\n        td.innerHTML = dataArray[i];\r\n        tr.appendChild(td);\r\n    }\r\n    if (highlight && tr.children.length > 1) {\r\n        if (parseFloat(tr.children[0].innerHTML) === parseFloat(tr.children[2].innerHTML)) {\r\n            tr.children[0].style.color = 'royalblue';\r\n            tr.children[2].style.color = 'royalblue';\r\n        }\r\n        else if (parseFloat(tr.children[0].innerHTML) > parseFloat(tr.children[2].innerHTML)) {\r\n            tr.children[0].style.color = 'green';\r\n            tr.children[2].style.color = 'orangered';\r\n        }\r\n        else {\r\n            tr.children[2].style.color = 'green';\r\n            tr.children[0].style.color = 'orangered';\r\n        }\r\n    }\r\n    return tr;\r\n}\r\nfunction getRecord(iterable, teamId) {\r\n    let w = 0, l = 0;\r\n    iterable.forEach(g => {\r\n        if (g.teams.away.team.id === teamId) {\r\n            w += (g.teams.away.score > g.teams.home.score) ? 1 : 0;\r\n            l += (g.teams.away.score > g.teams.home.score) ? 0 : 1;\r\n        }\r\n        else {\r\n            w += (g.teams.away.score < g.teams.home.score) ? 1 : 0;\r\n            l += (g.teams.away.score < g.teams.home.score) ? 0 : 1;\r\n        }\r\n    });\r\n    return `${w}-${l}`;\r\n}\r\nfunction getLastFiveGamesStreak(iterable, teamId) {\r\n    const container = document.createElement('div');\r\n    iterable.forEach(g => {\r\n        const box = document.createElement('div');\r\n        box.classList.add('box');\r\n        if (g.teams.away.team.id === teamId) {\r\n            if (g.teams.away.score > g.teams.home.score) {\r\n                box.classList.add('box-win');\r\n                box.innerHTML = 'W';\r\n            }\r\n            else {\r\n                box.classList.add('box-loss');\r\n                box.innerHTML = 'L';\r\n            }\r\n        }\r\n        else {\r\n            if (g.teams.away.score < g.teams.home.score) {\r\n                box.classList.add('box-win');\r\n                box.innerHTML = 'W';\r\n            }\r\n            else {\r\n                box.classList.add('box-loss');\r\n                box.innerHTML = 'L';\r\n            }\r\n        }\r\n        container.appendChild(box);\r\n    });\r\n    return container;\r\n}\r\nfunction getTeamFromGame(game, teamId) {\r\n    if (game.teams.away.team.id === teamId) {\r\n        return game.teams.away;\r\n    }\r\n    else {\r\n        return game.teams.home;\r\n    }\r\n}\r\nfunction createPointsCanvasTr(awayGames, homeGames) {\r\n    const tr = createTr([''], false, 1, 'td', 3);\r\n    var canvas = document.createElement('canvas');\r\n    canvas.style.height = '150px';\r\n    canvas.style.width = '100%';\r\n    tr.children[0].appendChild(canvas);\r\n    var chart = new Chart(canvas.getContext('2d'), {\r\n        type: 'line',\r\n        data: {\r\n            labels: new Array(10),\r\n            datasets: [{\r\n                    label: awayTeam.teamName,\r\n                    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n                    borderColor: TEAM_COLORS[awayTeam.name].away,\r\n                    data: awayGames.map(g => getTeamFromGame(g, awayTeam.id).leagueRecord.wins),\r\n                    lineTension: 0,\r\n                }, {\r\n                    label: homeTeam.teamName,\r\n                    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n                    borderColor: TEAM_COLORS[homeTeam.name].home,\r\n                    data: homeGames.map(g => getTeamFromGame(g, homeTeam.id).leagueRecord.wins),\r\n                    lineTension: 0,\r\n                }]\r\n        },\r\n        options: {\r\n            title: { text: 'Wins total (Last 10 Games)', display: true }\r\n        }\r\n    });\r\n    return tr;\r\n}\r\nfunction createGoalsScoredCanvasTr(awayGames, homeGames) {\r\n    const tr = createTr([''], false, 1, 'td', 3);\r\n    // let firstDate = new Date(awayGames[0].gameDate).getTime() > new Date(homeGames[0].gameDate).getTime() ? new Date(homeGames[0].gameDate) : new Date(homeGames[0].gameDate);\r\n    const firstDate = new Date(new Date().getTime() - (1000 * 60 * 60 * 24 * 7));\r\n    const labels = [];\r\n    while (firstDate.getTime() <= new Date().getTime()) {\r\n        labels.push(new Date(firstDate));\r\n        firstDate.setTime(firstDate.getTime() + (1000 * 60 * 60 * 24));\r\n    }\r\n    var canvas = document.createElement('canvas');\r\n    if (window.screen.width < 1000) {\r\n        canvas.width = 1;\r\n    }\r\n    else {\r\n        canvas.width = 3;\r\n    }\r\n    canvas.height = 1;\r\n    canvas.style.width = '100%';\r\n    tr.children[0].appendChild(canvas);\r\n    console.log(labels);\r\n    var chart = new Chart(canvas.getContext('2d'), {\r\n        type: 'bar',\r\n        data: {\r\n            labels: labels.map(d => d.toLocaleDateString('ch-de').slice(0, -5)),\r\n            datasets: [{\r\n                    label: awayTeam.teamName,\r\n                    backgroundColor: TEAM_COLORS[awayTeam.name].away,\r\n                    data: getGameData(awayTeam.id, awayGames, labels),\r\n                    barLabel: getBarLabels(awayTeam.id, awayGames, labels)\r\n                }, {\r\n                    label: homeTeam.teamName,\r\n                    backgroundColor: TEAM_COLORS[homeTeam.name].home,\r\n                    data: getGameData(homeTeam.id, homeGames, labels),\r\n                    barLabel: getBarLabels(homeTeam.id, homeGames, labels)\r\n                }]\r\n        },\r\n        options: {\r\n            title: { text: 'Goal diff. (Past 7 Days)', display: true },\r\n            tooltips: {\r\n                enabled: false,\r\n            },\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            stepSize: 1,\r\n                            min: -6,\r\n                            max: 6,\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            animation: {\r\n                onComplete: function () {\r\n                    var chartInstance = this.chart, ctx = chartInstance.ctx;\r\n                    ctx.font = 'bold 10pt Consolas';\r\n                    ctx.fillStyle = 'black';\r\n                    ctx.textAlign = \"center\";\r\n                    const stepHeight = 11;\r\n                    this.data.datasets.forEach(function (dataset, i) {\r\n                        var meta = chartInstance.controller.getDatasetMeta(i);\r\n                        meta.data.forEach(function (bar, index) {\r\n                            var data = dataset.data[index];\r\n                            var label = dataset.barLabel[index];\r\n                            if (data === 0 || !label) {\r\n                                return;\r\n                            }\r\n                            ctx.save();\r\n                            ctx.translate(bar._model.x - 8, bar._model.y + data * stepHeight);\r\n                            ctx.rotate(-Math.PI / 2);\r\n                            ctx.fillText(label, 0, 0);\r\n                            ctx.restore();\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return tr;\r\n}\r\nfunction getGameData(teamId, games, dateRange) {\r\n    const gameData = [];\r\n    const returnData = [];\r\n    dateRange.forEach(date => {\r\n        const gameDay = games.find(g => `${new Date(g.gameDate).getDate()}-${new Date(g.gameDate).getMonth()}` === `${date.getDate()}-${date.getMonth()}`);\r\n        gameDay ? gameData.push(gameDay) : gameData.push(undefined);\r\n    });\r\n    gameData.forEach(g => g ? returnData.push(getGoalDiff(g, teamId)) : returnData.push(0));\r\n    return returnData;\r\n}\r\nfunction getBarLabels(teamId, games, dateRange) {\r\n    const gameData = [];\r\n    const returnData = [];\r\n    dateRange.forEach(date => {\r\n        const gameDay = games.find(g => `${new Date(g.gameDate).getDate()}-${new Date(g.gameDate).getMonth()}` === `${date.getDate()}-${date.getMonth()}`);\r\n        gameDay ? gameData.push(gameDay) : gameData.push(undefined);\r\n    });\r\n    gameData.forEach((g) => {\r\n        if (g) {\r\n            if (g.teams.away.team.id === teamId) {\r\n                returnData.push(`@ ${TEAM_NAME_SHORT[g.teams.home.team.name]}`);\r\n            }\r\n            else {\r\n                returnData.push(`vs. ${TEAM_NAME_SHORT[g.teams.away.team.name]}`);\r\n            }\r\n        }\r\n        else {\r\n            returnData.push(undefined);\r\n        }\r\n    });\r\n    return returnData;\r\n}\r\nfunction getGoalDiff(game, teamId) {\r\n    if (game.teams.away.team.id === teamId) {\r\n        return game.teams.away.score - game.teams.home.score;\r\n    }\r\n    else {\r\n        return game.teams.home.score - game.teams.away.score;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./dist/build/controllers/game.controller.js?");

/***/ }),

/***/ "./dist/build/nhl.api.js":
/*!*******************************!*\
  !*** ./dist/build/nhl.api.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst API_URL = 'https://statsapi.web.nhl.com';\r\nconst STANDINGS = `${API_URL}/api/v1/standings`;\r\nconst TEAMS = `${API_URL}/api/v1/teams`;\r\nconst SCHEDULE = `${API_URL}/api/v1/schedule`;\r\nconst GAME = `${API_URL}/api/v1/game`;\r\nexports.SEASON_START = '2018-10-03';\r\nexports.SEASON_END = '2019-04-06';\r\nfunction getStandings() {\r\n    return fetch(STANDINGS)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err));\r\n}\r\nexports.getStandings = getStandings;\r\nfunction getTeam(id) {\r\n    return fetch(`${TEAMS}/${id}?expand=team.stats`)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err));\r\n}\r\nexports.getTeam = getTeam;\r\nfunction getScores(start, end) {\r\n    return fetch(`${SCHEDULE}?startDate=${start}&endDate=${end}`)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err));\r\n}\r\nexports.getScores = getScores;\r\nfunction getSchedule(id, start, end) {\r\n    return fetch(`${SCHEDULE}?teamId=${id}&startDate=${start}&endDate=${end}`)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err));\r\n}\r\nexports.getSchedule = getSchedule;\r\nfunction getRoster(id) {\r\n    return fetch(`${TEAMS}/${id}?expand=team.roster`)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err));\r\n}\r\nexports.getRoster = getRoster;\r\nfunction getGame(id) {\r\n    return fetch(`${GAME}/${id}/feed/live`)\r\n        .then(response => response.json())\r\n        .catch(err => console.error(err));\r\n}\r\nexports.getGame = getGame;\r\nexports.TEAM_NAME_SHORT = {\r\n    'Anaheim Ducks': 'ANA',\r\n    'Arizona Coyotes': 'ARI',\r\n    'Boston Bruins': 'BOS',\r\n    'Buffalo Sabres': 'BUF',\r\n    'Carolina Hurricanes': 'CAR',\r\n    'Calgary Flames': 'CGY',\r\n    'Chicago Blackhawks': 'CHI',\r\n    'Columbus Blue Jackets': 'CBJ',\r\n    'Colorado Avalanche': 'COL',\r\n    'Dallas Stars': 'DAL',\r\n    'Detroit Red Wings': 'DET',\r\n    'Edmonton Oilers': 'EDM',\r\n    'Florida Panthers': 'FLA',\r\n    'Los Angeles Kings': 'LAK',\r\n    'Minnesota Wild': 'MIN',\r\n    'Montréal Canadiens': 'MTL',\r\n    'Nashville Predators': 'NSH',\r\n    'New Jersey Devils': 'NJD',\r\n    'New York Islanders': 'NYI',\r\n    'New York Rangers': 'NYR',\r\n    'Ottawa Senators': 'OTT',\r\n    'Philadelphia Flyers': 'PHI',\r\n    'Pittsburgh Penguins': 'PIT',\r\n    'San Jose Sharks': 'SJS',\r\n    'St. Louis Blues': 'STL',\r\n    'Tampa Bay Lightning': 'TBL',\r\n    'Toronto Maple Leafs': 'TOR',\r\n    'Vancouver Canucks': 'VAN',\r\n    'Vegas Golden Knights': 'VGK',\r\n    'Winnipeg Jets': 'WPG',\r\n    'Washington Capitals': 'WSH',\r\n};\r\nexports.TEAM_COLORS = {\r\n    'Anaheim Ducks': { home: '#F47A38', away: '#B09862' },\r\n    'Arizona Coyotes': { home: '#8C2633', away: '#E2D6B5' },\r\n    'Boston Bruins': { home: '#FFB81C', away: '#A2AAAD' },\r\n    'Buffalo Sabres': { home: '#002654', away: '#ADAFAA' },\r\n    'Carolina Hurricanes': { home: '#CC0000', away: '#A2AAAD' },\r\n    'Calgary Flames': { home: '#C8102E', away: '#111111' },\r\n    'Chicago Blackhawks': { home: '#CF0A2C', away: '#D18A00' },\r\n    'Columbus Blue Jackets': { home: '#002654', away: '#A4A9AD' },\r\n    'Colorado Avalanche': { home: '#6F263D', away: '#A2AAAD' },\r\n    'Dallas Stars': { home: '#006847', away: '#8F8F8C' },\r\n    'Detroit Red Wings': { home: '#CE1126', away: '#A2AAAD' },\r\n    'Edmonton Oilers': { home: '#041E42', away: '#FF4C00' },\r\n    'Florida Panthers': { home: '#C8102E', away: '#B9975B' },\r\n    'Los Angeles Kings': { home: '#111111', away: '#A2AAAD' },\r\n    'Minnesota Wild': { home: '#154734', away: '#DDCBA4' },\r\n    'Montréal Canadiens': { home: '#AF1E2D', away: '#192168' },\r\n    'Nashville Predators': { home: '#FFB81C', away: '#A2AAAD' },\r\n    'New Jersey Devils': { home: '#154734', away: '#A2AAAD' },\r\n    'New York Islanders': { home: '#00539B', away: '#A2AAAD' },\r\n    'New York Rangers': { home: '#0038A8', away: '#A2AAAD' },\r\n    'Ottawa Senators': { home: '#E31837', away: '#C69214' },\r\n    'Philadelphia Flyers': { home: '#F74902', away: '#A2AAAD' },\r\n    'Pittsburgh Penguins': { home: '#000000', away: '#CFC493' },\r\n    'San Jose Sharks': { home: '#006D75', away: '#A2AAAD' },\r\n    'St. Louis Blues': { home: '#002F87', away: '#A2AAAD' },\r\n    'Tampa Bay Lightning': { home: '#002868', away: '#A2AAAD' },\r\n    'Toronto Maple Leafs': { home: '#003E7E', away: '#A2AAAD' },\r\n    'Vancouver Canucks': { home: '#001F5B', away: '#99999A' },\r\n    'Vegas Golden Knights': { home: '#333F42', away: '#B4975A' },\r\n    'Winnipeg Jets': { home: '#041E42', away: '#8E9090' },\r\n    'Washington Capitals': { home: '#C8102E', away: '#A2AAAD' },\r\n};\r\n\n\n//# sourceURL=webpack:///./dist/build/nhl.api.js?");

/***/ })

/******/ });